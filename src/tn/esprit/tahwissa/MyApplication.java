package tn.esprit.tahwissa;

import com.codename1.components.FileTree;
import com.codename1.components.ImageViewer;
import com.codename1.components.InfiniteProgress;
import com.codename1.components.SpanLabel;
import com.codename1.components.WebBrowser;
import com.codename1.ui.Button;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.Image;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.Toolbar;
import com.codename1.ui.URLImage;
import com.codename1.ui.geom.Dimension;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.util.UIBuilder;
import entity.Evenement;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import service.EventService;
import util.Converter;

import util.MenuManager;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class MyApplication implements Observer {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature, uncomment if you have a pro subscription
        // Log.bindCrashProtection(true);
    }

    Form f;
    private List<Evenement> events = new ArrayList<>();

    public void initList(int from, int to) {

        if (events.size() >= to) {
            for (int i = from; i < to; i++) {

                Container eventContainer = new Container(new BorderLayout());
                Evenement event = events.get(i);
                System.out.println("id:" + event.getId());
                String description = event.getDescription();
                if (description.length() > 40) {
                    description = description.substring(0, 40).concat("...");
                }
                Container northContainer = new Container(new BorderLayout());

                Container imageAndNameAndMail = new Container(new BoxLayout(BoxLayout.X_AXIS));
                // Label userImage = new Label("taswira");

                Container nameAndMail = new Container(new BoxLayout(BoxLayout.Y_AXIS));
                Label name = new Label(event.getUserName());
                Label email = new Label(event.getUserMail());
                name.setUIID("userName");
                email.setUIID("userEmail");
                nameAndMail.add(name);
                nameAndMail.add(email);

                // imageAndNameAndMail.add(userImage);
                imageAndNameAndMail.add(nameAndMail);

                Container destAndTime = new Container(new BoxLayout(BoxLayout.Y_AXIS));
                System.out.println(event.getDestination());
                Label dest;
                if (event.getDestination().indexOf(",") != -1) {
                    dest = new Label(event.getDestination().substring(0, event.getDestination().indexOf(",")));
                } else {
                    dest = new Label(event.getDestination());
                }
                Label time = new Label(event.getDateHeureDepart());
                destAndTime.add(dest);
                destAndTime.add(time);
                dest.setUIID("destinationEvent");
                time.setUIID("dateEvent");

                northContainer.addComponent(BorderLayout.WEST, imageAndNameAndMail);
                northContainer.addComponent(BorderLayout.EAST, destAndTime);

                Label imageEvent = new Label("");

                EncodedImage placeholder = EncodedImage.createFromImage(Image.createImage(400, 200), true);
                /*Image image = URLImage.createToStorage(placeholder, event.getImages().get(0).getChemin(),
                        "http://localhost/tahwissa/web/images/evenements/" + event.getImages().get(0).getChemin());
                 */
                String path = event.getImages().get(0).getChemin();
                Image image;
                if (path.indexOf("filestack") == -1) {
                    image = URLImage.createToStorage(placeholder, event.getImages().get(0).getChemin(), "http://localhost/tahwissa/web/images/evenements/" + event.getImages().get(0).getChemin());
                } else {
                    image = URLImage.createToStorage(placeholder, event.getImages().get(0).getChemin().substring(path.lastIndexOf("/") + 1), event.getImages().get(0).getChemin());
                }
                imageEvent.setIcon(image);

                Container centerContainer = FlowLayout.encloseCenterMiddle(imageEvent);

                SpanLabel descriptionEvent = new SpanLabel(description, "descriptionEventText");
                Button btnDetails = new Button(theme.getImage("arrow.png"));
                btnDetails.setUIID("detailsEvent");
                descriptionEvent.add(BorderLayout.EAST, btnDetails);

                descriptionEvent.setUIID("descriptionEvent");
                Label l;

                if (event.getEvenementType().equals("camping")) {
                    l = new Label("Camping");
                    l.setTextPosition(Label.RIGHT);
                    l.setIcon(theme.getImage("camping2.png").scaled(35, 35));
                } else {
                    l = new Label("RandonnÃ©e");
                    l.setTextPosition(Label.RIGHT);
                    l.setIcon(theme.getImage("rando.png").scaled(35, 35));

                }
                l.setUIID("typeEvent");
                l.setGap(10);
                northContainer.add(BorderLayout.NORTH, l);
                btnDetails.addActionListener((evt) -> {
                    DetailsEvent.e = event;
                    DetailsEvent d = new DetailsEvent();
                    d.init(current);
                    d.start();
                });
                eventContainer.add(BorderLayout.NORTH, northContainer);
                eventContainer.add(BorderLayout.CENTER, centerContainer);
                eventContainer.add(BorderLayout.SOUTH, descriptionEvent);
                f.add(eventContainer);
            }
        } else {
            for (int i = from; i < events.size(); i++) {

                Container eventContainer = new Container(new BorderLayout());
                Evenement event = events.get(i);
                System.out.println("id:" + event.getId());
                String description = event.getDescription();
                if (description.length() > 40) {
                    description = description.substring(0, 40).concat("...");
                }
                Container northContainer = new Container(new BorderLayout());

                Container imageAndNameAndMail = new Container(new BoxLayout(BoxLayout.X_AXIS));
                // Label userImage = new Label("taswira");

                Container nameAndMail = new Container(new BoxLayout(BoxLayout.Y_AXIS));
                Label name = new Label(event.getUserName());
                Label email = new Label(event.getUserMail());
                name.setUIID("userName");
                email.setUIID("userEmail");
                nameAndMail.add(name);
                nameAndMail.add(email);

                // imageAndNameAndMail.add(userImage);
                imageAndNameAndMail.add(nameAndMail);

                Container destAndTime = new Container(new BoxLayout(BoxLayout.Y_AXIS));
                System.out.println(event.getDestination());
                Label dest;
                if (event.getDestination().indexOf(",") != -1) {
                    dest = new Label(event.getDestination().substring(0, event.getDestination().indexOf(",")));
                } else {
                    dest = new Label(event.getDestination());
                }

                Label time = new Label(event.getDateHeureDepart());
                destAndTime.add(dest);
                destAndTime.add(time);
                dest.setUIID("destinationEvent");
                time.setUIID("dateEvent");

                northContainer.addComponent(BorderLayout.WEST, imageAndNameAndMail);
                northContainer.addComponent(BorderLayout.EAST, destAndTime);

                Label imageEvent = new Label("");

                EncodedImage placeholder = EncodedImage.createFromImage(Image.createImage(400, 200), true);
                String path = event.getImages().get(0).getChemin();
                Image image;
                if (path.indexOf("filestack") == -1) {
                    image = URLImage.createToStorage(placeholder, event.getImages().get(0).getChemin(), "http://localhost/tahwissa/web/images/evenements/" + event.getImages().get(0).getChemin());
                } else {
                    image = URLImage.createToStorage(placeholder, event.getImages().get(0).getChemin().substring(path.lastIndexOf("/") + 1), event.getImages().get(0).getChemin());
                }
                imageEvent.setIcon(image);
                Container centerContainer = FlowLayout.encloseCenterMiddle(imageEvent);

                SpanLabel descriptionEvent = new SpanLabel(description, "descriptionEventText");
                Button btnDetails = new Button(theme.getImage("arrow.png"));
                btnDetails.setUIID("detailsEvent");
                descriptionEvent.add(BorderLayout.EAST, btnDetails);
                Label l;

                if (event.getEvenementType().equals("camping")) {
                    l = new Label("Camping");
                    l.setTextPosition(Label.RIGHT);
                    l.setIcon(theme.getImage("camping2.png").scaled(35, 35));
                } else {
                    l = new Label("RandonnÃ©e");
                    l.setTextPosition(Label.RIGHT);
                    l.setIcon(theme.getImage("rando.png").scaled(35, 35));

                }
                l.setUIID("typeEvent");
                l.setGap(10);
                northContainer.add(BorderLayout.NORTH, l);
                descriptionEvent.setUIID("descriptionEvent");
                btnDetails.addActionListener((evt) -> {
                    DetailsEvent.e = event;
                    DetailsEvent d = new DetailsEvent();
                    d.init(current);
                    d.start();
                });
                eventContainer.add(BorderLayout.NORTH, northContainer);
                eventContainer.add(BorderLayout.CENTER, centerContainer);
                eventContainer.add(BorderLayout.SOUTH, descriptionEvent);
                f.add(eventContainer);
            }
        }
        paginate();
    }

    public void start() {
        
        UIBuilder uibuilder = new UIBuilder();
       
        UIBuilder.registerCustomComponent("ImageViewer", ImageViewer.class);
        UIBuilder.registerCustomComponent("FileTree", FileTree.class);

        Container container = uibuilder.createContainer(theme, "eventshome");
        

      
        
        
        
        
         //f = container.getComponentForm();
         f= new Form("Accueil",new BorderLayout());
                
        f.getToolbar().addCommandToOverflowMenu("Consulter les publications", null, (evt) -> {
            ListPublication a = new ListPublication();
            a.init(current);
            a.start();
        });
        f.getToolbar().addCommandToOverflowMenu("ajouter une publication", null, (evt) -> {
            AjouterPublication a = new AjouterPublication();
            a.init(current);
            a.start();
        });
        f.getToolbar().addCommandToOverflowMenu("Mes publications", null, (evt) -> {

        ListPublication a = new ListPublication();
            a.init(current);
            a.start();
        });
        f.getContentPane().addPullToRefresh(() -> {
            f.removeAll();
            //refresh();
        });

        MenuManager.createMenu(f, theme);
   
        f.show();

       // refresh();

    }

//    public void refresh() {
//
//        InfiniteProgress ip = new InfiniteProgress();
//        Dialog dlg = ip.showInifiniteBlocking();
//        EventService t = new EventService();
//        // t.getAvailable(dlg, this);
//    }

    public void stop() {
        current = Display.getInstance().getCurrent();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }

    public void destroy() {
    }

    public void paginate() {
        float pagesFloat = ((float) (events.size())) / 4;
        int pages = 0;
        if (pagesFloat % 1 != 0) {
            pages = ((int) pagesFloat) + 1;
        } else {
            pages = ((int) pagesFloat);
        }
        Container pageNumberContainer = new Container(new FlowLayout(Component.CENTER));
        for (int i = 1; i <= pages; i++) {
            Label l = new Label(String.valueOf(i));
            l.setUIID("pageNumber");
            l.setFocusable(true);
            l.addPointerPressedListener((evt) -> {
                Label lab = (Label) (evt.getSource());
                int selectedPage = Integer.valueOf(lab.getText());

                int from = (selectedPage - 1) * 4;
                int to = from + 4;
                System.out.println("PAge : " + selectedPage + " (from " + from + " to " + to + ")");
                f.removeAll();

                initList(from, to);
                f.refreshTheme();

            });
            // pageNumberContainer.add(l);
            f.add(l);
        }
        f.add(pageNumberContainer);
    }

    @Override
    public void update(Observable o, Object arg) {
        System.out.println("notfied");
        EventService t = (EventService) o;
        events = t.events;
        initList(0, 4);

        //System.out.println(f);
    }

}
