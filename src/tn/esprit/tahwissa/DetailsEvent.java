package tn.esprit.tahwissa;

import com.codename1.components.ImageViewer;
import com.codename1.components.InfiniteProgress;
import com.codename1.components.InteractionDialog;
import com.codename1.components.SpanLabel;
import com.codename1.components.ToastBar;
import com.codename1.ui.Button;
import com.codename1.ui.Container;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.FontImage;
import com.codename1.ui.Image;
import com.codename1.ui.Label;
import com.codename1.ui.TextField;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.Toolbar;
import com.codename1.ui.URLImage;
import com.codename1.ui.geom.Dimension;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.list.DefaultListModel;
import com.codename1.ui.list.ListModel;
import com.codename1.ui.util.UIBuilder;
import entity.Evenement;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import service.EventService;
import util.MenuManager;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class DetailsEvent implements Observer {
    
    private Form current;
    private Resources theme;
    public static Evenement e = new Evenement();
    private ToastBar.Status status;
    
    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature, uncomment if you have a pro subscription
        // Log.bindCrashProtection(true);
    }
    Form f;
    private List<entity.Image> images = new ArrayList<>();
    private Container container;
    private String baseUrl;
    
    private void initImages() {
        UIBuilder uibuilder = new UIBuilder();
        ImageViewer imgV = (ImageViewer) uibuilder.findByName("imageviewer", container);
        if (images.size() == 1) {
            EncodedImage placeholder = EncodedImage.createFromImage(Image.createImage(Display.getInstance().getDisplayWidth(), 150), true);
            String path = images.get(0).getChemin();
            Image image;
            if (path.indexOf("filestack") == -1) {
                image = URLImage.createToStorage(placeholder, images.get(0).getChemin(), "http://localhost/tahwissa/web/images/evenements/" + images.get(0).getChemin());
            } else {
                image = URLImage.createToStorage(placeholder, images.get(0).getChemin().substring(path.lastIndexOf("/") + 1), images.get(0).getChemin());
            }
            imgV.setImage(image);
            System.out.println("http://localhost/tahwissa/web/images/evenements/" + images.get(0).getChemin());
            f.refreshTheme();
            return;
        }
        
        ListModel<Image> imagesList = new DefaultListModel<>();
        for (int i = 0; i < images.size(); i++) {
            
            EncodedImage placeholder = EncodedImage.createFromImage(Image.createImage(Display.getInstance().getDisplayWidth(), 150), false);
            String path = images.get(i).getChemin();
            Image image;
            if (path.indexOf("filestack") == -1) {
                image = URLImage.createToStorage(placeholder, images.get(i).getChemin(), "http://localhost/tahwissa/web/images/evenements/" + images.get(i).getChemin());
            } else {
                System.out.println(path);
                image = URLImage.createToStorage(placeholder, images.get(i).getChemin().substring(path.lastIndexOf("/") + 1), images.get(i).getChemin());
            }
            //imgV.setImage(image);
            //System.out.println("http://localhost/tahwissa/web/images/evenements/" + images.get(i).getChemin());
            imagesList.addItem(image);
        }
        imgV.setPreferredSize(new Dimension(Display.getInstance().getDisplayWidth(), 150));
        imgV.setImageList(imagesList);
        imgV.getImageList().setSelectedIndex(0);
        f.refreshTheme();
    }
    
    public void initInfos() {
        UIBuilder uibuilder = new UIBuilder();
        Label prix = (Label) uibuilder.findByName("prix", container);
        Label places = (Label) uibuilder.findByName("places", container);
        Label date = (Label) uibuilder.findByName("date", container);
        prix.setText(String.valueOf(e.getFrais()));
        places.setText((e.getNombrePlaces() - e.getNombrePlacesPrises())+"");
        date.setText(e.getDateHeureDepart());
        
        SpanLabel description = (SpanLabel) uibuilder.findByName("description", container);
        description.setText(e.getDescription());
        SpanLabel reglement = (SpanLabel) uibuilder.findByName("reglement", container);
        reglement.setText(e.getReglement());
        
        Label titre = (Label) uibuilder.findByName("titre", container);
        Label distance = (Label) uibuilder.findByName("distance", container);
        Label duree = (Label) uibuilder.findByName("duree", container);
        Container c = (Container) uibuilder.findByName("test", container);
        if (e.getEvenementType().equals("camping")) {
            titre.setIcon(theme.getImage("camp.png"));
            titre.setText("Camping");
            c.removeComponent(distance);
            duree.setText(String.valueOf(e.getDuree()));
        } else {
            titre.setText("Randonnée");
            titre.setIcon(theme.getImage("rando.png"));
            c.removeComponent(duree);
            distance.setText(String.valueOf(e.getDistanceParcourue()));
        }
        f.refreshTheme();
        Label dest = (Label) uibuilder.findByName("destination", container);
        dest.setText(e.getDestination());
        
    }
    InteractionDialog d;
    UIBuilder uibuilder;
    
    public void initButtons() {
        UIBuilder uibuilder = new UIBuilder();
        Button participerButton = (Button) uibuilder.findByName("participer", container);
        Container buttons = (Container) uibuilder.findByName("buttons", container);
        Button modifierButton = (Button) uibuilder.findByName("modifier", container);
        Button supprimerButton = (Button) uibuilder.findByName("supprimer", container);

        // System.out.println(e.getUserMail() + " vs " + LoginManager.getUser().getEmail());
        if (e.getUserMail().equals(LoginManager.getUser().getEmail()) == false) {
            buttons.removeComponent(modifierButton);
            buttons.removeComponent(supprimerButton);
            participerButton.addActionListener((evt) -> {
                if (e.getNombrePlaces() - e.getNombrePlacesPrises() == 0) {
                    ToastBar.showErrorMessage("Evenement complet");
                    return;
                }
                d = new InteractionDialog("Paiement");
               // d.setSize(new Dimension(Display.getInstance().getDisplayWidth(),Display.getInstance().getDisplayHeight()/2));
                d.setUIID("myDialog");
                d.setLayout(BoxLayout.y());
                Label l = new Label("Passcode");
                TextField passcode = new TextField();
                Button valider = new Button("Valider");
                valider.addActionListener((ev) -> {
                    status = ToastBar.getInstance().createStatus();
                    
                    status.setMessage("Chargement");
                    status.setShowProgressIndicator(true);
                    status.setProgress(0);
                    status.show();
                    EventService service = new EventService();
                    service.participer(e, LoginManager.getUser(), passcode.getText(), this);
                    for (int i = 0; i < 100; i++) {
                        status.setProgress(i);
                    }
                });
                Button fermer = new Button("Fermer");
                fermer.addActionListener((ev) -> {
                    d.dispose();
                });
                d.add(l);
                d.add(passcode);
                d.add(valider);
                d.add(fermer);
                valider.setUIID("buttonPrimary");
                fermer.setUIID("buttonPrimary");
                d.show(0, 0, 0, 0);
            });
            f.refreshTheme();
            return;
        }
        buttons.removeComponent(participerButton);
        modifierButton.addActionListener((evt) -> {
            if (e.getStatut().equals("Accepté")) {
                ToastBar.showErrorMessage("Vous ne pouvez pas modifier cet evenement");
                return;
            }
            Modifier m = new Modifier();
            Modifier.evenement = DetailsEvent.e;
            m.init(current);
            m.start();
        });
        supprimerButton.addActionListener((evt) -> {
            if (e.getStatut().equals("Accepté")) {
                ToastBar.showErrorMessage("Vous ne pouvez pas supprimer cet evenement");
                return;
            }
            
            status = ToastBar.getInstance().createStatus();
            
            status.setMessage("Suppression");
            status.setShowProgressIndicator(true);
            status.setProgress(0);
            status.show();
            EventService service = new EventService();
            service.removeEvent(e, this);
            for (int i = 0; i < 100; i++) {
                status.setProgress(i);
            }
            
        });
    }
    
    public void start() {
        // System.out.println(e.getId());
        System.out.println(e.getNombrePlaces()+" , taken : "+e.getNombrePlacesPrises());
        uibuilder = new UIBuilder();
        UIBuilder.registerCustomComponent("ImageViewer", ImageViewer.class);
        UIBuilder.registerCustomComponent("SpanLabel", SpanLabel.class);
        container = uibuilder.createContainer(theme, "detailsEvent");
        f = container.getComponentForm();
        f.getToolbar().addCommandToOverflowMenu("Consulter les évènements", null, (evt) -> {
            MyApplication m = new MyApplication();
            m.init(current);
            m.start();
        });
        f.getToolbar().addCommandToOverflowMenu("Organiser un evenement", null, (evt) -> {
            Organiser o = new Organiser();
            o.init(current);
            o.start();
        });
        f.getToolbar().addCommandToOverflowMenu("Mes évenements", null, (evt) -> {
            
        });
        MenuManager.createMenu(f, theme);
        initInfos();
        initButtons();
        f.show();
        
        InfiniteProgress ip = new InfiniteProgress();
        Dialog dlg = ip.showInifiniteBlocking();
        EventService t = new EventService();
        t.getEventImages(e.getId(), this, dlg);
    }
    
    public void stop() {
        current = Display.getInstance().getCurrent();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }
    
    public void destroy() {
        
    }
    
    @Override
    public void update(Observable o, Object arg) {
        if (arg instanceof List) {
            // System.out.println("notified");
            EventService t = (EventService) o;
            images = (List<entity.Image>) arg;
            initImages();
        } else if (arg instanceof String) {
            String result = (String) arg;
            status.clear();
            if (result.equals("-1")) {
                ToastBar.showErrorMessage("Vous avez déja participé a cet évènement, opération annulée");
                d.dispose();
                return;
            }
            if (result.equals("-2")) {
                ToastBar.showErrorMessage("Passcode invalide");
                
                return;
            }
            if (result.equals("0")) {
                ToastBar.showErrorMessage("Solde insuffisant");
                return;
            } else {
                Label places = (Label) uibuilder.findByName("places", container);
                e.setNombrePlacesPrises(e.getNombrePlacesPrises() + 1);
                places.setText(String.valueOf(e.getNombrePlaces() - e.getNombrePlacesPrises()));
                ToastBar.showMessage("Participation effectuée avec succès", FontImage.MATERIAL_CHECK);
                f.refreshTheme();
                d.dispose();
            }
            
        } else {
            status.clear();
            ToastBar.showMessage("Evenement supprimé", FontImage.MATERIAL_CHECK);
            MyApplication m = new MyApplication();
            m.init(current);
            m.start();
        }
        
    }
    
}
