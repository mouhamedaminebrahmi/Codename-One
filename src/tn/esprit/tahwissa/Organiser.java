package tn.esprit.tahwissa;

import com.codename1.components.FileTree;
import com.codename1.components.FileTreeModel;
import com.codename1.components.InteractionDialog;
import com.codename1.components.ToastBar;
import com.codename1.googlemaps.MapContainer;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.io.MultipartRequest;
import com.codename1.io.NetworkManager;
import com.codename1.maps.Coord;
import com.codename1.maps.MapComponent;
import com.codename1.ui.Button;
import com.codename1.ui.ComboBox;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.FontImage;
import com.codename1.ui.Image;
import com.codename1.ui.Label;
import com.codename1.ui.RadioButton;
import com.codename1.ui.TextField;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.Toolbar;
import com.codename1.ui.geom.Dimension;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.LayeredLayout;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.spinner.DateTimeSpinner;
import com.codename1.ui.spinner.Picker;
import com.codename1.ui.util.UIBuilder;
import com.codename1.util.Callback;
import entity.Creneau;
import entity.Evenement;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;
import service.EventService;
import util.MenuManager;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class Organiser implements Observer {

    private Form current;
    private Resources theme;
    private MapContainer.MapObject marker;
    private Button clickedFile;
    private java.util.List<String> selectedFiles = new ArrayList<>();
    private Image unselectedImage;
    private Evenement evenement;

    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature, uncomment if you have a pro subscription
        // Log.bindCrashProtection(true);
    }
    Form f;
    private int currentTab = 1;
    Container container;
    Container first;
    Container second;
    Container third;
    List<Creneau> planning = new ArrayList<Creneau>();
    public int creneauCount = 0;
    public java.util.List<Picker> debuts = new ArrayList<>();
    public java.util.List<Picker> fins = new ArrayList<>();
    public java.util.List<TextField> descriptions = new ArrayList<>();
    private FileTree fileTree;
    private MapContainer map = new MapContainer();
    private Container campingContainer;
    private Container randonneeContainer;
    private List<String> uploadedImages = new ArrayList<>();
    ToastBar.Status status;
    int currentUpload = 1;
    int lastProgress = -1;

    public void initFileTree() {
        FileTreeModel model = new FileTreeModel(true);
        fileTree = new FileTree(model);

        fileTree.addLeafListener((evt) -> {
            Container c = (Container) fileTree.getComponentAt(0);
            Container fileContainer = (Container) c.getComponentAt(1);

            System.out.println(c.getComponentCount());
            System.out.println("File name : " + evt.getSource().toString());
            search(fileContainer, evt.getSource().toString());
            if (clickedFile != null) {
                if (selectedFiles.indexOf(evt.getSource().toString()) == -1) {
                    unselectedImage = clickedFile.getIcon();
                    clickedFile.setIcon(theme.getImage("selected-file.png"));
                    //clickedFile.setUIID("selectedFile");
                    selectedFiles.add(evt.getSource().toString());
                    f.refreshTheme();
                } else {
                    selectedFiles.remove(evt.getSource().toString());
                    clickedFile.setIcon(unselectedImage);
                    // clickedFile.setUIID("TreeNode");
                    f.refreshTheme();
                }
            } else {
                System.out.println("Not found");
            }

        });
    }

    public void resolvePlace(Coord c) {
        ConnectionRequest request = new ConnectionRequest("http://maps.googleapis.com/maps/api/geocode/json?latlng=" + c.getLatitude() + ","
                + c.getLongitude() + "&sensor=true");
        request.addResponseListener((evt) -> {

            String a = (new String(request.getResponseData()));
            // System.out.println(a);
            if (a.indexOf("ZERO_RESULTS") == -1) {
                JSONParser json = new JSONParser();
                try {
                    String ret = "";
                    Map<String, Object> response = json.parseJSON(new InputStreamReader(new ByteArrayInputStream(request.getResponseData()), "UTF-8"));

                    if (response.get("results") != null) {
                        ArrayList results = (ArrayList) response.get("results");
                        if (results.size() > 0) {
                            ret = (String) ((LinkedHashMap) results.get(1)).get("formatted_address");
                            if (evenement == null) {
                                evenement = new Evenement();
                            }
                            evenement.setDestination(ret);
                            System.out.println(evenement.getDestination());

                            // ret = (String) ((LinkedHashMap) results.get(1)).get("long_name");
                            //ret +=","+ (String) ((LinkedHashMap) results.get(2)).get("long_name");
                            //System.out.println(ret);
                        }
                    }

                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
        );
        request.setPost(
                true);
        NetworkManager.getInstance()
                .addToQueue(request);

    }

    public void switchTab(int nextTab) {
        if (currentTab == nextTab) {
            return;
        }
        if (nextTab == 1) {

            f.removeComponent(third);
            f.removeComponent(second);
            f.addComponent(0, first);
            currentTab = 1;
            f.setScrollableX(false);
            f.refreshTheme();
        }
        if (nextTab == 2) {
            f.removeComponent(first);
            f.removeComponent(third);

            f.addComponent(0, second);
            currentTab = 2;
            f.setScrollableX(false);
            f.refreshTheme();
        }
        if (nextTab == 3) {
            f.removeComponent(first);

            f.removeComponent(second);
            f.addComponent(0, third);
            currentTab = 3;
            f.setScrollableX(true);
            f.refreshTheme();
        }
    }

    public void initTabs() {
        Picker dateHeureDepart = (Picker) uibuilder.findByName("dateDepart", container);
        dateHeureDepart.setType(Display.PICKER_TYPE_DATE_AND_TIME);
        //dateHeureDepart.setPreferredW(Display.getInstance().getDisplayWidth());

        //  map.setPreferredSize(new Dimension(200, 400));
        UIBuilder uibuilder = new UIBuilder();
        first = (Container) uibuilder.findByName("infosContainer", container);
        second = (Container) uibuilder.findByName("mapContainer", container);
        Style s = new Style();
        s.setFgColor(0xff0000);
        s.setBgTransparency(0);
        FontImage markerImg = FontImage.createMaterial(FontImage.MATERIAL_PLACE, s, Display.getInstance().convertToPixels(1));

        map.setCameraPosition(new Coord(33.8869, 9.5375));
        map.setShowMyLocation(true);
        map.addTapListener((e) -> {
            if (marker != null) {
                map.removeMapObject(marker);

            }

            marker = map.addMarker(
                    EncodedImage.createFromImage(markerImg, false),
                    map.getCoordAtPosition(e.getX(), e.getY()),
                    "Selected",
                    "Test",
                    e3 -> {
                        // ToastBar.showMessage("You clicked " + "abc", FontImage.MATERIAL_PLACE);
                    }
            );
            resolvePlace(map.getCoordAtPosition(e.getX(), e.getY()));
        });
        map.addMapListener((source, zoom, center) -> {
            map.setCameraPosition(center);
        });

        third = (Container) uibuilder.findByName("planningContainer", container);
        Button btn = new Button("Ajouter des images");
        btn.addActionListener((evt) -> {
            InteractionDialog dlg = new InteractionDialog("SÃ©lectionnez les fichiers");
            dlg.setLayout(new BorderLayout());
            dlg.add(BorderLayout.NORTH, fileTree);
            Button close = new Button("Close");
            close.addActionListener((ee) -> {
                dlg.removeAll();
                dlg.dispose();
            });
            dlg.addComponent(BorderLayout.SOUTH, close);
            Dimension pre = dlg.getContentPane().getPreferredSize();
            dlg.show(0, 0, 0, 0);
        });
        Container root = LayeredLayout.encloseIn(
                BorderLayout.center(map),
                BorderLayout.south(
                        FlowLayout.encloseBottom(btn)
                )
        );
        second.add(BorderLayout.CENTER, root);
        //third.setVisible(false);
        f.removeComponent(second);
        f.removeComponent(third);
        f.refreshTheme();
        Button next = (Button) uibuilder.findByName("next", container);
        next.addActionListener((evt) -> {
            int nextTab = currentTab + 1;
            if (nextTab == 2) {
                f.removeComponent(first);
                f.addComponent(0, second);
                currentTab++;
                f.setScrollableX(false);
                f.refreshTheme();
            }
            if (nextTab == 3) {
                f.removeComponent(second);
                f.addComponent(0, third);
                currentTab++;
                f.setScrollableX(true);
                f.refreshTheme();
            }
        });
        Button prev = (Button) uibuilder.findByName("prev", container);
        prev.addActionListener((evt) -> {
            int nextTab = currentTab - 1;
            if (nextTab == 2) {
                f.removeComponent(third);
                f.addComponent(0, second);
                f.setScrollableX(false);
                f.refreshTheme();
                currentTab--;
            }
            if (nextTab == 1) {
                f.removeComponent(second);
                f.addComponent(0, first);
                f.setScrollableX(false);
                f.refreshTheme();
                currentTab--;
            }
        });
    }

    public void initRadioActions() {

        RadioButton campingRadio = (RadioButton) uibuilder.findByName("campingRadio", container);
        RadioButton randonneeRadio = (RadioButton) uibuilder.findByName("randonneeRadio", container);
        campingContainer = (Container) uibuilder.findByName("campingContainer", container);
        randonneeContainer = (Container) uibuilder.findByName("randonneContainer", container);
        first.removeComponent(campingContainer);
        first.removeComponent(randonneeContainer);
        campingRadio.setUnselectAllowed(true);
        randonneeRadio.setUnselectAllowed(true);

        TextField nbJours = (TextField) uibuilder.findByName("nbjours", container);
        TextField distanceParcourue = (TextField) uibuilder.findByName("distanceParcourue", container);
        TextField typeRando = (TextField) uibuilder.findByName("type", container);
        ComboBox<String> difficulte = (ComboBox) uibuilder.findByName("difficulte", container);

        campingRadio.addActionListener((evt) -> {
            if (campingRadio.isSelected()) {

                if (randonneeRadio.isSelected()) {
                    randonneeRadio.setSelected(false);
                    first.removeComponent(randonneeContainer);
                }
                nbJours.setEnabled(true);
                first.add(campingContainer);
                f.refreshTheme();

            } else {
                first.removeComponent(campingContainer);
                f.refreshTheme();
            }
        });
        randonneeRadio.addActionListener((evt) -> {
            if (randonneeRadio.isSelected()) {
                if (campingRadio.isSelected()) {
                    campingRadio.setSelected(false);
                    first.removeComponent(campingContainer);
                }

                distanceParcourue.setEnabled(true);
                typeRando.setEnabled(true);
                difficulte.setEnabled(true);
                first.add(randonneeContainer);
                f.refreshTheme();
            } else {
                first.removeComponent(randonneeContainer);
                f.refreshTheme();
            }
        });
    }

    public void addCreneau() {
        UIBuilder uibuilder = new UIBuilder();
        Picker debut = new Picker();
        debut.setType(Display.PICKER_TYPE_DATE_AND_TIME);

        Picker fin = new Picker();

        fin.setType(Display.PICKER_TYPE_DATE_AND_TIME);
        fin.setSize(new Dimension(50, 100));
        TextField description = new TextField();
        description.setUIID("inputText");
        description.setRows(2);
        debuts.add(debut);
        fins.add(fin);
        descriptions.add(description);
        Container planningContainer = (Container) uibuilder.findByName("planningTable", container);

        planningContainer.add(debut);
        planningContainer.add(fin);
        planningContainer.add(description);
        creneauCount++;
        f.refreshTheme();
    }

    public void delCreneau() {
        UIBuilder uibuilder = new UIBuilder();
        Container planningContainer = (Container) uibuilder.findByName("planningTable", container);
        if (creneauCount != 1) {
            planningContainer.removeComponent(planningContainer.getComponentAt(planningContainer.getComponentCount() - 1));
            planningContainer.removeComponent(planningContainer.getComponentAt(planningContainer.getComponentCount() - 1));
            planningContainer.removeComponent(planningContainer.getComponentAt(planningContainer.getComponentCount() - 1));
            debuts.remove(debuts.size() - 1);
            fins.remove(fins.size() - 1);
            descriptions.remove(descriptions.size() - 1);
            creneauCount--;
            f.refreshTheme();
        }
    }

    public void start() {
        uibuilder = new UIBuilder();
        UIBuilder
                .registerCustomComponent("DateTimeSpinner", DateTimeSpinner.class
                );
        UIBuilder
                .registerCustomComponent("MapComponent", MapComponent.class
                );
        UIBuilder
                .registerCustomComponent("Picker", Picker.class
                );
        container = uibuilder.createContainer(theme, "organiser");
        f = container.getComponentForm();
        f.getToolbar().addCommandToOverflowMenu("Consulter les Ã©vÃ¨nements", null, (evt) -> {
            MyApplication m = new MyApplication();
            m.init(current);
            m.start();
        });

        f.getToolbar().addCommandToOverflowMenu("Organiser un evenement", null, (evt) -> {

        });
        f.getToolbar().addCommandToOverflowMenu("Mes Ã©venements", null, (evt) -> {

        });
        MenuManager.createMenu(f, theme);
        Label addCreneauLabel = (Label) uibuilder.findByName("addCreneau", container);
        Label delCreneauLabel = (Label) uibuilder.findByName("delCreneau", container);

        addCreneauLabel.addPointerPressedListener((evt) -> {
            addCreneau();
        });

        delCreneauLabel.addPointerPressedListener((evt) -> {
            System.out.println("deleting");
            delCreneau();
        });
        Button submit = (Button) uibuilder.findByName("submit", container);
        submit.addActionListener((evt) -> {
            if (validate() == true) {
                pictureUpload(new Callback<String>() {
                    @Override
                    public void onSucess(String value) {
                        uploadedImages.add(value);
                        System.out.println("uploaded " + value);
                        if (uploadedImages.size() >= selectedFiles.size()) {
                            System.out.println("pictures uploaded");
                            picturesUploaded();
                        }
                    }

                    @Override
                    public void onError(Object sender, Throwable err, int errorCode, String errorMessage) {
                        uploadedImages.clear();
                    }
                });

            }
        });
        submit.setPreferredW(Display.getInstance().getDisplayWidth() - 5);
        initTabs();
        initRadioActions();
        initFileTree();
        // addCreneau();
        f.show();
    }

    public boolean validateNumber(TextField tf, String message) {
        if (tf.getText().equals("")) {
            ToastBar.showMessage(message + " requis", FontImage.MATERIAL_ERROR);
            return false;
        }
        try {
            Double d = Double.valueOf(tf.getText());
        } catch (NumberFormatException e) {
            ToastBar.showMessage(message + " invalide", FontImage.MATERIAL_ERROR);
        }
        return true;

    }

    public boolean validateRequired(TextField tf, String message) {
        if (tf.getText().equals("")) {
            ToastBar.showMessage(message + " requis(e)", FontImage.MATERIAL_ERROR);
            return false;
        }
        return true;
    }
    private UIBuilder uibuilder;

    public boolean validate() {

        if (evenement == null) {
            evenement = new Evenement();
        }

        // Validation de la date de dÃ©part
        Picker dateHeureDepart = (Picker) uibuilder.findByName("dateDepart", container);
        if (dateHeureDepart.getDate().getTime() < new Date().getTime()) {
            ToastBar.showMessage("Date dÃ©part invalide", FontImage.MATERIAL_ERROR);
            switchTab(1);
            return false;
        } else {
            evenement.setDateHeureDepart(dateHeureDepart.getDate().toString());
        }

        // Validation du nombre de places
        TextField nbPlaces = (TextField) uibuilder.findByName("nbPlaces", container);
        if (validateNumber(nbPlaces, "Nombre de places") == false) {
            switchTab(1);
            return false;
        } else {
            evenement.setNombrePlaces(Integer.valueOf(nbPlaces.getText()));
        }

        // Validation des frais
        TextField frais = (TextField) uibuilder.findByName("frais", container);
        if (validateNumber(frais, "Frais") == false) {
            switchTab(1);
            return false;
        } else {
            evenement.setFrais(Double.valueOf(frais.getText()));
        }

        // Validation du lieu de rassemblement
        TextField lieuRassemblement = (TextField) uibuilder.findByName("lieuRassemblement", container);
        if (validateRequired(lieuRassemblement, "Lieu de rassemblement") == false) {
            switchTab(1);
            return false;
        } else {
            evenement.setLieuRassemblement(lieuRassemblement.getText());
        }

        // Validation  de la description
        TextField description = (TextField) uibuilder.findByName("description", container);
        if (validateRequired(description, "Description") == false) {
            switchTab(1);
            return false;
        } else {
            evenement.setDescription(description.getText());
        }

        // Validation du reglement
        TextField reglement = (TextField) uibuilder.findByName("reglement", container);
        if (validateRequired(reglement, "RÃ¨glement") == false) {
            switchTab(1);
            return false;
        } else {
            evenement.setReglement(reglement.getText());
        }

        // Validation des infos concernant le camping/randonnÃ©e
        RadioButton campingRadio = (RadioButton) uibuilder.findByName("campingRadio", container);
        RadioButton randonneeRadio = (RadioButton) uibuilder.findByName("randonneeRadio", container);

        if (campingRadio.isSelected()) {
            evenement.setEvenementType("camping");
            TextField nbJours = (TextField) uibuilder.findByName("nbjours", container);
            if (validateNumber(nbJours, "Nombre de jours") == false) {
                switchTab(1);
                return false;
            }
            evenement.setDuree(Integer.valueOf(nbJours.getText()));
        } else if (randonneeRadio.isSelected()) {
            TextField distanceParcourue = (TextField) uibuilder.findByName("distanceParcourue", container);
            if (validateNumber(distanceParcourue, "Distance parcourue") == false) {
                switchTab(1);
                return false;
            } else {
                evenement.setDistanceParcourue(Double.valueOf(distanceParcourue.getText()));
            }
            TextField typeRando = (TextField) uibuilder.findByName("type", container);
            if (validateRequired(typeRando, "Type randonnÃ©e") == false) {
                switchTab(1);
                return false;
            } else {
                evenement.setType(typeRando.getText());
            }
            ComboBox<String> difficulte = (ComboBox<String>) uibuilder.findByName("difficulte", container);
            if ((difficulte.getSelectedItem() == null) || (difficulte.getSelectedItem().equals(""))) {
                ToastBar.showMessage("DifficultÃ© requise", FontImage.MATERIAL_ERROR);
                switchTab(1);
                return false;
            } else {
                evenement.setDifficulte(difficulte.getSelectedItem());
            }
        } else {
            ToastBar.showMessage("Type d'Ã©vÃ¨nement requis", FontImage.MATERIAL_ERROR);
            switchTab(1);
            return false;
        }

        // Validation de la destination
        if ((evenement.getDestination() == null) || (evenement.getDestination().equals(""))) {
            ToastBar.showMessage("Veuillez choisir une destination", FontImage.MATERIAL_ERROR);
            switchTab(2);
            return false;
        }

        // Validation des fichiers uploades
        if (selectedFiles.size() == 0) {
            ToastBar.showMessage("Veuillez choisir au moins une image", FontImage.MATERIAL_ERROR);
            switchTab(2);
            return false;
        }

        // Validation des crÃ©neaux
        for (int i = 0; i < debuts.size(); i++) {

            if (i == 0) {
                if (debuts.get(i).getDate().getTime() < dateHeureDepart.getDate().getTime()) {
                    ToastBar.showMessage("Dates du crÃ©neau " + (i + 1) + " invalides", FontImage.MATERIAL_ERROR);
                    switchTab(3);
                    return false;
                }
            } else {
                if (debuts.get(i).getDate().getTime() < fins.get(i - 1).getDate().getTime()) {
                    ToastBar.showMessage("Dates du crÃ©neau " + (i + 1) + " invalides", FontImage.MATERIAL_ERROR);
                    switchTab(3);
                    return false;
                }

            }
            if (fins.get(i).getDate().getTime() < debuts.get(i).getDate().getTime()) {
                ToastBar.showMessage("Dates du crÃ©neau " + (i + 1) + " invalides", FontImage.MATERIAL_ERROR);
                switchTab(3);
                return false;
            }

            if ((descriptions.get(i).getText() == null) || (descriptions.get(i).getText().equals(""))) {
                ToastBar.showMessage("Description du crÃ©neau " + (i + 1) + " requise", FontImage.MATERIAL_ERROR);
                switchTab(3);
                return false;
            }

            Creneau c = new Creneau();
            c.setDateDebut(debuts.get(i).getDate().toString());
            c.setDateFin(fins.get(i).getDate().toString());
            c.setDescription(descriptions.get(i).getText());
            planning.add(c);
        }

        return true;
    }

    public void stop() {
        current = Display.getInstance().getCurrent();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }

    public void destroy() {
    }

    public void search(Container c, String fileName) {
        //System.out.println("File container size : " + c.getComponentCount());
        for (int i = 0; i < c.getComponentCount(); i++) {
            //System.out.println("iteration "+i);
            Component component = c.getComponentAt(i);
            if (component instanceof Button) {

                Button b = (Button) component;

                if (fileName.indexOf(b.getText()) != -1) {
                    clickedFile = b;
                    System.out.println(b.getUIID());
                    return;
                }

            } else {

                Container cont = (Container) component;
                search(cont, fileName);
            }
        }

    }

    public void pictureUpload(final Callback<String> resultURL) {
        status = ToastBar.getInstance().createStatus();
        status.setMessage("Upload");
        status.setShowProgressIndicator(true);
        status.setProgress(0);
        status.show();
        NetworkManager.getInstance().addProgressListener((nEvent) -> {
            int progress = nEvent.getProgressPercentage();
            if ((progress != -1) && (progress < lastProgress)) {
                status.setProgress(0);
                currentUpload++;
                if (currentUpload > selectedFiles.size()) {

                    status.clear();

                    return;
                }

            }
            if ((progress != -1)) {
                if ((status.getProgress() > 95) && (status.getProgress() <= 100)) {
                    status.setProgress(0);
                } else {
                    status.setProgress(progress);
                }

                System.out.println(progress);

            }
            lastProgress = progress;
        });
        for (int i = 0; i < selectedFiles.size(); i++) {
            String picture = selectedFiles.get(i);
            if (picture != null) {
                String filestack = "https://www.filestackapi.com/api/store/S3?key=AtNd0OC4CSm6kNh6SvkQrz&filename=myPicture.jpg";
                MultipartRequest request = new MultipartRequest() {
                    protected void readResponse(InputStream input) throws IOException {
                        JSONParser jp = new JSONParser();
                        Map<String, Object> result = jp.parseJSON(new InputStreamReader(input, "UTF-8"));
                        String url = (String) result.get("url");
                        if (url == null) {
                            resultURL.onError(null, null, 1, result.toString());
                            return;
                        }
                        resultURL.onSucess(url);
                    }
                };
                request.setUrl(filestack);
                try {
                    request.addData("fileUpload", picture, "image/jpeg");
                    request.setFilename("fileUpload", picture.substring(picture.lastIndexOf("/")));
                    NetworkManager.getInstance().addToQueueAndWait(request);
                } catch (IOException err) {
                    err.printStackTrace();
                }
            }
        }
    }

    public void picturesUploaded() {
        status = ToastBar.getInstance().createStatus();
        status.setMessage("Upload");
        status.setShowProgressIndicator(true);
        status.setProgress(0);
        status.show();
        EventService service = new EventService();
        evenement.setOrganisateur_id(LoginManager.getUser().getId());
        evenement.setGuide_id(LoginManager.getUser().getId());
        service.addEvent(evenement, planning, uploadedImages,this);
        for (int i = 0; i <= 50; i++) {
            status.setProgress(i);
        }
    }

    @Override
    public void update(Observable o, Object arg) {
        status.clear();
        ToastBar.showErrorMessage("Evenement ajoutÃ©");
        String msg= (String) arg;
        int id = Integer.parseInt(msg);
        DetailsEvent detailsEvent = new DetailsEvent();
        evenement.setId(id);
        DetailsEvent.e= evenement;
        detailsEvent.init(current);
        detailsEvent.start();
        
    }
}
